{"version":3,"sources":["api/index.ts","components/Title/style.ts","components/Title/index.tsx","components/WorldChart/style.ts","helper.ts","components/WorldChart/index.tsx","components/CountryChart/style.ts","components/CountryChart/index.tsx","components/Reference/style.ts","components/Reference/index.tsx","style/theme.ts","style/globalstyle.ts","style/app.ts","lang/i18n.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getSummaryCovidData","axios","get","getCountryInfo","country","url","TitleSection","styled","section","palette","props","theme","laptop","mobile","UpperWrppaer","article","Empty","div","SelectWrapper","UserSelect","select","Title","p","MainInfoWrapper","RowWrapper","SpecificInfoWrapper","SpecificInfoTitle","SpecificInfoIncreaseNum","SpecificInfoTotalNum","InfoText","CaptionText","FlagImg","img","changeCountry","countriesInfo","selectedInfo","globalInfo","useTranslation","t","i18n","onChange","e","changeLanguage","target","value","map","countryInfo","idx","CountryCode","Country","NewConfirmed","TotalConfirmed","NewDeaths","TotalDeaths","src","toLowerCase","width","height","alt","Date","RankingSection","RankingTitle","ShowMoreButton","button","RankingTable","table","RankingTh","th","RankingWideTh","RankingTr","tr","RankingHeadTr","RankingTd","td","thousandSeperator","num","toString","replace","WorldChart","useState","rankIdx","setRankIdx","rankList","setRankList","useEffect","makeRankTableRow","copiedRankList","Array","from","push","onClick","ChartSection","ChartTitle","OneCountryChartWrapper","ChartDateSelect","CountryChart","countryDailyInfo","makeDateList","makeChartData","monthChartInfo","setMonthChartInfo","dateList","setDateList","selectedDate","setSelectedDate","dateInfo","oneMonthData","monthDate","setMonth","getMonth","filter","item","startDate","endDate","label","substring","indexOf","Confirmed","Deaths","copiedDailyInfo","resultArray","length","dateIdx","findIndex","splice","chartData","labels","datasets","type","backgroundColor","borderColor","data","selectedValue","window","scrollTo","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Tooltip","Legend","DataReference","ReferenceTitle","ReferenceUl","ul","ReferenceLi","li","Reference","size","dark_primary","white","green","deep_gray","gray","red","fontStyle","title","subtitle","body1","body2","body3","caption","commonPadding","Object","keys","forEach","key","GlobalStyles","createGlobalStyle","PageWrapper","resources","en","translation","ko","use","initReactI18next","init","lng","debug","keySeparator","App","setCountriesInfo","NewRecovered","TotalRecovered","setGlobalInfo","setSelectedInfo","setCountryDailyInfo","a","Global","Countries","sort","b","initData","getCountryData","defaultTheme","selectedCountry","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e76057f.chunk.js","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport { SummaryCovidResponse, OneCountryInfoResponse } from \"../types\";\n\n// for summary info\nexport function getSummaryCovidData(): Promise<\n  AxiosResponse<SummaryCovidResponse>\n> {\n  const url = \"https://api.covid19api.com/summary\";\n  return axios.get(url);\n}\n\n// for specific country info\n\nexport function getCountryInfo(\n  country: string\n): Promise<AxiosResponse<Array<OneCountryInfoResponse>>> {\n  const url = `https://api.covid19api.com/total/country/${country}`;\n  return axios.get(url);\n}\n","import styled from \"styled-components\";\nimport { theme, palette } from \"styled-tools\";\n\nexport const TitleSection = styled.section`\n  border-radius: 8px;\n  border: 1px solid ${palette(\"gray\")};\n  margin: 30px auto;\n\n  @media ${(props) => props.theme.laptop} {\n    padding: 32px;\n    width: 80vw;\n  }\n  @media ${(props) => props.theme.mobile} {\n    padding: 10px 0;\n    width: 90vw;\n  }\n`;\nexport const UpperWrppaer = styled.article`\n  display: flex;\n  justify-content: space-between;\n`;\nexport const Empty = styled.div`\n  width: 22%;\n`;\nexport const SelectWrapper = styled.div`\n  min-height: 4vh;\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  align-self: center;\n`;\n\nexport const UserSelect = styled.select`\n  width: 20vw;\n  min-width: 136px;\n  float: right;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  color: ${palette(\"green\")};\n  border-color: ${palette(\"green\")};\n  padding: 4px;\n  ${theme(\"fontStyle.body3\")};\n  font-weight: bold;\n  border-radius: 4px;\n  margin: 0 10px 8px;\n  background-color: ${palette(\"dark_primary\")};\n`;\n\nexport const Title = styled.p`\n  ${theme(\"fontStyle.title_bold\")}\n`;\n\nexport const MainInfoWrapper = styled.div`\n  margin: 30px auto;\n  @media ${(props) => props.theme.laptop} {\n    display: flex;\n    justify-content: space-around;\n  }\n\n  @media ${(props) => props.theme.mobile} {\n    display: block;\n  }\n`;\n\nexport const RowWrapper = styled.div`\n  @media ${(props) => props.theme.laptop} {\n    display: contents;\n  }\n\n  @media ${(props) => props.theme.mobile} {\n    display: flex;\n    justify-content: space-around;\n  }\n`;\n\nexport const SpecificInfoWrapper = styled.div``;\n\nexport const SpecificInfoTitle = styled.p`\n  ${theme(\"fontStyle.body1_bold\")}\n  word-break: keep-all;\n  color: ${palette(\"deep_gray\")};\n`;\nexport const SpecificInfoIncreaseNum = styled.p`\n  ${theme(\"fontStyle.subtitle_bold\")}\n  color: ${palette(\"red\")};\n`;\n\nexport const SpecificInfoTotalNum = styled.p`\n  ${theme(\"fontStyle.body1\")}\n`;\nexport const InfoText = styled.p`\n  ${theme(\"fontStyle.caption\")}\n  color: ${palette(\"red\")};\n  align-self: center;\n`;\nexport const CaptionText = styled.p`\n  text-align: right;\n  margin: 0 10px 0 0;\n  ${theme(\"fontStyle.caption\")}\n`;\n\nexport const FlagImg = styled.img``;\n","import * as S from \"./style\";\nimport React from \"react\";\nimport { SpecificInfo, Country } from \"../../types\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n  changeCountry: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  countriesInfo: Array<Country> | undefined;\n  selectedInfo: SpecificInfo | undefined;\n  globalInfo: SpecificInfo | undefined;\n}\n\nexport default function Title({\n  changeCountry,\n  countriesInfo,\n  selectedInfo,\n  globalInfo,\n}: Props): React.ReactElement {\n  const { t, i18n } = useTranslation();\n  const changeLanguage = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    i18n.changeLanguage(e.target.value);\n  };\n\n  return (\n    <S.TitleSection>\n      <S.UpperWrppaer>\n        <S.Empty />\n        <S.Title> {t(\"titleName\")}</S.Title>\n        <S.SelectWrapper>\n          <S.UserSelect onChange={changeLanguage}>\n            <option key={\"lang0\"} value=\"en\">\n              Language\n            </option>\n            <option key={\"lang1\"} value=\"en\">\n              English\n            </option>\n            <option key={\"lang2\"} value=\"ko\">\n              한국어\n            </option>\n          </S.UserSelect>\n          <S.UserSelect onChange={changeCountry}>\n            <option>Country</option>\n            {countriesInfo?.map((countryInfo, idx) => (\n              <option key={idx} value={countryInfo.CountryCode}>\n                {countryInfo.Country}\n              </option>\n            ))}\n          </S.UserSelect>\n        </S.SelectWrapper>\n      </S.UpperWrppaer>\n      <S.MainInfoWrapper>\n        <S.RowWrapper>\n          <S.SpecificInfoWrapper>\n            <S.SpecificInfoTitle> {t(\"worldConfirmed\")} </S.SpecificInfoTitle>\n            <S.SpecificInfoIncreaseNum>\n              {globalInfo?.NewConfirmed}\n            </S.SpecificInfoIncreaseNum>\n            <S.SpecificInfoTotalNum>\n              {globalInfo?.TotalConfirmed}\n            </S.SpecificInfoTotalNum>\n          </S.SpecificInfoWrapper>\n          <S.SpecificInfoWrapper>\n            <S.SpecificInfoTitle> {t(\"worldDeaths\")} </S.SpecificInfoTitle>\n            <S.SpecificInfoIncreaseNum>\n              {globalInfo?.NewDeaths}\n            </S.SpecificInfoIncreaseNum>\n            <S.SpecificInfoTotalNum>\n              {globalInfo?.TotalDeaths}\n            </S.SpecificInfoTotalNum>\n          </S.SpecificInfoWrapper>\n        </S.RowWrapper>\n\n        {selectedInfo ? (\n          <>\n            <S.RowWrapper>\n              <S.SpecificInfoWrapper>\n                <S.SpecificInfoTitle>\n                  <S.FlagImg\n                    src={`https://flagcdn.com/16x12/${selectedInfo.CountryCode.toLowerCase()}.png`}\n                    width=\"16\"\n                    height=\"12\"\n                    alt={selectedInfo.CountryCode}\n                  />{\" \"}\n                  {t(\"confirmed\")}\n                </S.SpecificInfoTitle>\n                <S.SpecificInfoIncreaseNum>\n                  {selectedInfo.NewConfirmed}\n                </S.SpecificInfoIncreaseNum>\n                <S.SpecificInfoTotalNum>\n                  {selectedInfo.TotalConfirmed}\n                </S.SpecificInfoTotalNum>\n              </S.SpecificInfoWrapper>\n              <S.SpecificInfoWrapper>\n                <S.SpecificInfoTitle>\n                  <S.FlagImg\n                    src={`https://flagcdn.com/16x12/${selectedInfo.CountryCode.toLowerCase()}.png`}\n                    width=\"16\"\n                    height=\"12\"\n                    alt={selectedInfo.CountryCode}\n                  />{\" \"}\n                  {t(\"deaths\")}\n                </S.SpecificInfoTitle>\n                <S.SpecificInfoIncreaseNum>\n                  {selectedInfo.NewDeaths}\n                </S.SpecificInfoIncreaseNum>\n                <S.SpecificInfoTotalNum>\n                  {selectedInfo.TotalDeaths}\n                </S.SpecificInfoTotalNum>\n              </S.SpecificInfoWrapper>\n            </S.RowWrapper>\n          </>\n        ) : (\n          <S.InfoText> {t(\"chooseCountry\")}</S.InfoText>\n        )}\n      </S.MainInfoWrapper>\n      <S.CaptionText>\n        {t(\"dataTime\")}\n        <br /> {globalInfo?.Date}\n      </S.CaptionText>\n    </S.TitleSection>\n  );\n}\n","import styled from \"styled-components\";\nimport { theme, palette } from \"styled-tools\";\n\nexport const RankingSection = styled.section``;\nexport const RankingTitle = styled.p`\n  ${theme(\"fontStyle.title_bold\")};\n`;\nexport const ShowMoreButton = styled.button`\n  background-color: ${palette(\"white\")};\n  margin: 8px 0;\n  height: 40px;\n  width: 80vw;\n  ${theme(\"fontStyle.caption_bold\")};\n`;\nexport const RankingTable = styled.table`\n  margin: 0 auto;\n  border-spacing: 0;\n  border-collapse: collapse;\n  height: 100%;\n  width: 80vw;\n  word-break: keep-all;\n  @media ${(props) => props.theme.laptop} {\n    ${theme(\"fontStyle.caption\")};\n  }\n  @media ${(props) => props.theme.mobile} {\n    ${theme(\"fontStyle.body2\")};\n  }\n`;\nexport const RankingTh = styled.th`\n  border: solid ${palette(\"gray\")};\n  border-width: 0 1px 1px 0;\n  position: sticky;\n  top: 0px;\n  @media ${(props) => props.theme.laptop} {\n    min-width: 40px;\n  }\n  @media ${(props) => props.theme.mobile} {\n    min-width: 0px;\n  }\n`;\nexport const RankingWideTh = styled.th`\n  border: solid ${palette(\"gray\")};\n  border-width: 0 1px 1px 0;\n  width: 10vw;\n`;\nexport const RankingTr = styled.tr`\n  height: 36px;\n`;\nexport const RankingHeadTr = styled.tr`\n  height: 36px;\n  position: sticky;\n  top: 0;\n  background-color: ${palette(\"deep_gray\")};\n`;\n\nexport const RankingTd = styled.td`\n  border: solid ${palette(\"gray\")};\n  border-width: 0 1px 1px 0;\n`;\n","export function thousandSeperator(num: number): string {\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n","import * as S from \"./style\";\nimport React, { ReactNode, useEffect, useState } from \"react\";\nimport { Country } from \"../../types\";\nimport { thousandSeperator } from \"../../helper\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Props {\n  countriesInfo: Array<Country> | undefined;\n}\n\nexport default function WorldChart({\n  countriesInfo,\n}: Props): React.ReactElement {\n  const { t } = useTranslation();\n\n  const [rankIdx, setRankIdx] = useState<number>(0);\n\n  const [rankList, setRankList] = useState<Array<ReactNode>>();\n\n  useEffect(() => {\n    makeRankTableRow(rankIdx);\n  }, [countriesInfo, rankIdx]);\n\n  const makeRankTableRow = (rankIdx: number) => {\n    if (!!!countriesInfo) return;\n\n    const copiedRankList = Array.from(rankList || []);\n    for (let idx = rankIdx * 50; idx < rankIdx * 50 + 50; idx++) {\n      if (!!!countriesInfo[idx]) break;\n      copiedRankList.push(\n        <S.RankingTr key={idx}>\n          <S.RankingTd>{idx + 1}</S.RankingTd>\n          <S.RankingTd>{countriesInfo[idx].Country}</S.RankingTd>\n          <S.RankingTd>\n            {thousandSeperator(countriesInfo[idx].TotalConfirmed)}\n          </S.RankingTd>\n          <S.RankingTd>\n            {thousandSeperator(countriesInfo[idx].TotalDeaths)}\n          </S.RankingTd>\n          <S.RankingTd>\n            {thousandSeperator(countriesInfo[idx].NewConfirmed)}\n          </S.RankingTd>\n          <S.RankingTd>\n            {thousandSeperator(countriesInfo[idx].NewDeaths)}\n          </S.RankingTd>\n        </S.RankingTr>\n      );\n    }\n    setRankList(copiedRankList);\n  };\n\n  return (\n    <S.RankingSection>\n      <S.RankingTitle> {t(\"worldTable\")} </S.RankingTitle>\n      <S.RankingTable>\n        <thead>\n          <S.RankingHeadTr>\n            <S.RankingTh></S.RankingTh>\n            <S.RankingTh>{t(\"country\")}</S.RankingTh>\n            <S.RankingWideTh>{t(\"totalConfirmed\")}</S.RankingWideTh>\n            <S.RankingWideTh>{t(\"totalDeaths\")}</S.RankingWideTh>\n            <S.RankingTh>{t(\"todayConfirmed\")}</S.RankingTh>\n            <S.RankingTh>{t(\"todayDeaths\")}</S.RankingTh>\n          </S.RankingHeadTr>\n        </thead>\n        <tbody>{rankList}</tbody>\n      </S.RankingTable>\n      {rankIdx <= 2 && (\n        <S.ShowMoreButton onClick={() => setRankIdx(rankIdx + 1)}>\n          {t(\"showMore\")}\n        </S.ShowMoreButton>\n      )}\n    </S.RankingSection>\n  );\n}\n","import styled from \"styled-components\";\nimport { theme, palette } from \"styled-tools\";\n\nexport const ChartSection = styled.section`\n  padding: 32px 0 32px;\n`;\nexport const ChartTitle = styled.p`\n  ${theme(\"fontStyle.title_bold\")};\n`;\nexport const OneCountryChartWrapper = styled.div`\n  margin: 0 auto;\n  @media ${(props) => props.theme.laptop} {\n    width: 80vw;\n  }\n  @media ${(props) => props.theme.mobile} {\n    width: 90vw;\n  }\n`;\nexport const InfoText = styled.p`\n  height: 80px;\n  width: 80vw;\n  margin: 40px auto 0;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const ChartDateSelect = styled.select`\n  width: 20vw;\n  min-width: 136px;\n  float: right;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  color: ${palette(\"green\")};\n  border-color: ${palette(\"green\")};\n  padding: 4px;\n  ${theme(\"fontStyle.body3\")};\n  font-weight: bold;\n  border-radius: 4px;\n  margin: 0 10px 8px;\n  background-color: ${palette(\"dark_primary\")};\n`;\n","import * as S from \"./style\";\nimport React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  OneMonthChartInfo,\n  OneCountryInfoResponse,\n  ShowingDate,\n} from \"../../types\";\nimport {\n  Chart as ChartJS,\n  LinearScale,\n  CategoryScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Legend,\n  Tooltip,\n} from \"chart.js\";\nimport { Chart } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Tooltip,\n  Legend\n);\ninterface Props {\n  countryDailyInfo: Array<OneCountryInfoResponse> | undefined;\n}\n\nexport default function CountryChart({\n  countryDailyInfo,\n}: Props): React.ReactElement {\n  const { t } = useTranslation();\n  useEffect(() => {\n    makeDateList();\n    makeChartData(\"initData\");\n  }, [countryDailyInfo]);\n\n  const [monthChartInfo, setMonthChartInfo] = useState<OneMonthChartInfo>();\n\n  const [dateList, setDateList] = useState<Array<ShowingDate>>([]);\n\n  const [selectedDate, setSelectedDate] = useState<ShowingDate>();\n\n  useEffect(() => {\n    selectedDate && makeChartData(selectedDate);\n  }, [selectedDate]);\n\n  const makeChartData = (dateInfo: ShowingDate | \"initData\") => {\n    let oneMonthData;\n    if (dateInfo === \"initData\") {\n      const monthDate = new Date();\n      monthDate.setMonth(monthDate.getMonth() - 1);\n      oneMonthData = countryDailyInfo?.filter(\n        (item) => new Date(item.Date) > monthDate\n      );\n    } else {\n      oneMonthData = countryDailyInfo?.filter(\n        (item) =>\n          new Date(item.Date) >= new Date(dateInfo.startDate) &&\n          new Date(item.Date) <= new Date(dateInfo.endDate)\n      );\n    }\n    if (oneMonthData) {\n      setMonthChartInfo({\n        label: oneMonthData?.map((item) =>\n          item.Date.substring(5, item.Date.indexOf(\"T\"))\n        ),\n        Confirmed: oneMonthData?.map((item) => item.Confirmed),\n        Deaths: oneMonthData?.map((item) => item.Deaths),\n      });\n    }\n  };\n\n  const makeDateList = () => {\n    const monthDate = new Date();\n    const copiedDailyInfo = Array.from(countryDailyInfo || []);\n    const resultArray: Array<ShowingDate> = [];\n    if (copiedDailyInfo.length === 0) return;\n    while (copiedDailyInfo.length > 1) {\n      monthDate.setMonth(monthDate.getMonth() - 1);\n      const dateIdx = copiedDailyInfo.findIndex(\n        (item) => new Date(item.Date) >= monthDate\n      );\n      const startDate = copiedDailyInfo[dateIdx].Date;\n      const endDate = copiedDailyInfo[copiedDailyInfo.length - 1].Date;\n      resultArray.push({\n        startDate: startDate.substring(0, startDate.indexOf(\"T\")),\n        endDate: endDate.substring(0, endDate.indexOf(\"T\")),\n      });\n      copiedDailyInfo.splice(dateIdx, copiedDailyInfo.length - 1);\n    }\n    setDateList([...resultArray]);\n  };\n\n  const changeDate = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const startDate = e.target.value;\n    const selectedValue = dateList.filter(\n      (item) => item.startDate === startDate\n    )[0];\n    selectedValue && setSelectedDate({ ...selectedValue });\n  };\n\n  const chartData = {\n    labels: monthChartInfo?.label,\n    datasets: [\n      {\n        type: \"line\" as const,\n        label: \"Confirmed\",\n        backgroundColor: \"#ED1313\",\n        borderColor: \"#ED1313\",\n        data: monthChartInfo?.Confirmed,\n      },\n      {\n        type: \"line\" as const,\n        label: \"Deaths\",\n        backgroundColor: \"#909090\",\n        borderColor: \"#909090\",\n        data: monthChartInfo?.Deaths,\n      },\n    ],\n  };\n  return (\n    <S.ChartSection>\n      {monthChartInfo ? (\n        <>\n          <S.ChartTitle>{t(\"selectedCountryChart\")}</S.ChartTitle>\n          <S.OneCountryChartWrapper>\n            <S.ChartDateSelect onChange={changeDate}>\n              {dateList?.map((dateList, idx) => (\n                <option key={idx} value={dateList.startDate}>\n                  {dateList.startDate} ~ {dateList.endDate}\n                </option>\n              ))}\n            </S.ChartDateSelect>\n            <Chart type=\"bar\" data={chartData} />\n          </S.OneCountryChartWrapper>\n        </>\n      ) : (\n        <S.InfoText onClick={() => window.scrollTo(0, 0)}>\n          {t(\"pleaseSelectContry\")}\n        </S.InfoText>\n      )}\n    </S.ChartSection>\n  );\n}\n","import styled from \"styled-components\";\nimport { theme } from \"styled-tools\";\n\nexport const DataReference = styled.section`\n  width: 80vw;\n  margin: 32px auto;\n`;\n\nexport const ReferenceTitle = styled.p`\n  ${theme(\"fontStyle.title_bold\")};\n`;\n\nexport const ReferenceUl = styled.ul`\n  text-align: start;\n`;\nexport const ReferenceLi = styled.li`\n  ${theme(\"fontStyle.caption\")};\n`;\n","import * as S from \"./style\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function Reference(): React.ReactElement {\n  const { t } = useTranslation();\n\n  return (\n    <S.DataReference>\n      <S.ReferenceTitle>{t(\"references\")}</S.ReferenceTitle>\n      <S.ReferenceUl>\n        <S.ReferenceLi>https://covid19api.com</S.ReferenceLi>\n        <S.ReferenceLi>https://flagpedia.net/about</S.ReferenceLi>\n      </S.ReferenceUl>\n    </S.DataReference>\n  );\n}\n","interface thmeProps {\n  [key: string]: any;\n}\n\nconst size = {\n  mobile: \"770px\",\n  laptop: \"1460px\",\n};\n\nconst theme: thmeProps = {\n  palette: {\n    dark_primary: \"#121212\",\n    white: \"#FFFFFF\",\n    green: \"#038F11\",\n    deep_gray: \"#909090\",\n    gray: \"#BDBDBD\",\n    red: \"#ED1313\",\n  },\n  fontStyle: {\n    title: `font-size: 2rem;`,\n    subtitle: `font-size: 1.4rem;`,\n    body1: `font-size: 1.2rem;`,\n    body2: `font-size : 0.9rem`,\n    body3: `font-size : 0.8rem`,\n    caption: `font-size: 1rem;`,\n  },\n  commonPadding: `padding: 16px 20px;`,\n  mobile: `(max-width: ${size.mobile})`,\n  laptop: `(max-width: ${size.laptop})`,\n};\n\nObject.keys(theme.fontStyle).forEach((key) => {\n  theme.fontStyle[`${key}_bold`] = `${theme.fontStyle[key]}\n                                      font-weight: bold;\n                                      `;\n});\nexport default theme;\n","import { createGlobalStyle } from \"styled-components\";\nimport { palette } from \"styled-tools\";\n\nconst GlobalStyles = createGlobalStyle`\nbody {\n    background-color:${palette(\"dark_primary\")};\n    margin: 0;\n}\n`;\n\nexport default GlobalStyles;\n","import styled from \"styled-components\";\nimport { palette } from \"styled-tools\";\n\nexport const PageWrapper = styled.article`\n  color: ${palette(\"white\")};\n  text-align: center;\n`;\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport langEn from \"./lang.en.json\";\nimport langKo from \"./lang.ko.json\";\n\nconst resources = {\n  en: {\n    translation: langEn,\n  },\n  ko: {\n    translation: langKo,\n  },\n};\n\ni18n.use(initReactI18next).init({\n  resources: resources,\n  lng: \"en\",\n  debug: false,\n  keySeparator: false,\n});\n\nexport default i18n;\n","import React, { useEffect, FC, useState } from \"react\";\nimport { getSummaryCovidData, getCountryInfo } from \"./api\";\nimport { SpecificInfo, Country, OneCountryInfoResponse } from \"./types\";\nimport { Title, WorldChart, CountryChart, Reference } from \"./components\";\nimport { ThemeProvider } from \"styled-components\";\nimport defaultTheme from \"./style/theme\";\nimport GlobalStyles from \"./style/globalstyle\";\nimport * as S from \"./style/app\";\nimport \"./lang/i18n\";\n\nconst App: FC = () => {\n  const [countriesInfo, setCountriesInfo] = useState<Array<Country>>();\n  const [globalInfo, setGlobalInfo] = useState<SpecificInfo>({\n    NewConfirmed: 0,\n    NewDeaths: 0,\n    NewRecovered: 0,\n    TotalConfirmed: 0,\n    TotalDeaths: 0,\n    TotalRecovered: 0,\n    Date: \"\",\n    CountryCode: \"\",\n  });\n  const [selectedInfo, setSelectedInfo] = useState<SpecificInfo>();\n  const [countryDailyInfo, setCountryDailyInfo] =\n    useState<Array<OneCountryInfoResponse>>();\n\n  async function initData() {\n    const { data } = await getSummaryCovidData();\n    /** TODO:\n     * 로컬 스토리지에 저장해둔 글로벌 정보가 있으면 해당 정보가 제일 먼저 보이도록,\n     * 만약 없으면 Global로 가는 것\n     *  */\n    setGlobalInfo(data.Global);\n    setCountriesInfo(\n      data.Countries.sort((a, b) => b.TotalConfirmed - a.TotalConfirmed)\n    );\n  }\n\n  useEffect(() => {\n    initData();\n  }, []);\n\n  async function getCountryData() {\n    if (selectedInfo) {\n      const { data } = await getCountryInfo(selectedInfo.CountryCode);\n      setCountryDailyInfo(data);\n    }\n  }\n\n  useEffect(() => {\n    getCountryData();\n  }, [selectedInfo]);\n\n  const changeCountry = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = e.target;\n    const selectedCountry = countriesInfo?.filter(\n      (country) => country.CountryCode === value\n    )[0];\n\n    if (selectedCountry) {\n      setSelectedInfo(selectedCountry);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <GlobalStyles />\n      <S.PageWrapper>\n        <Title\n          changeCountry={changeCountry}\n          countriesInfo={countriesInfo}\n          selectedInfo={selectedInfo}\n          globalInfo={globalInfo}\n        />\n        <WorldChart countriesInfo={countriesInfo}></WorldChart>\n        <CountryChart countryDailyInfo={countryDailyInfo} />\n        <Reference />\n      </S.PageWrapper>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}